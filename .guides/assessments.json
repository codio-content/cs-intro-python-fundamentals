[
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2318046941",
  "source": {
   "name": "Python Print Statement",
   "showName": false,
   "instructions": "## Print Statement\nWhat does the `print` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8d434707-f06e-b243-0255-e907d93f0070",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "384abd09-2074-9d98-7a37-0d1a4d0117af",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "25e0febb-abe7-7958-8b77-77e694128374",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "5010b36f-4055-fdc4-8681-3d0f640b737a",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `print` command sends your output to the screen.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Fundametals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize what the print command does"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2419368717",
  "source": {
   "name": "Python Variables",
   "showName": false,
   "instructions": "## Variables\nWhich of the following items is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "86d55fed-5e50-dc95-0c39-457ed5470948",
     "correct": false,
     "answer": "`my-variable`"
    },
    {
     "_id": "508b2e1b-57a8-14d4-43bd-4fc3bf7d3bb4",
     "correct": true,
     "answer": "`_my_variable`"
    },
    {
     "_id": "b6f5b9aa-1eaa-a93a-7587-3db734c3a1e0",
     "correct": false,
     "answer": "`1_my_variable`"
    },
    {
     "_id": "5b84c7bc-ffe0-98bb-5a35-e0665a15500a",
     "correct": false,
     "answer": "`my_variable!`"
    }
   ],
   "guidance": "Here are the basic rules for variable names:\n* Must start with an underscore or a letter\n* The rest of the variable can contain letters, numbers, or underscores\n* May not use a Python keyword",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT declare a valid variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3378723738",
  "source": {
   "name": "Python Data Types",
   "showName": false,
   "instructions": "What are the four basic data types of Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "23aedede-9c0e-a742-d588-877fd749727a",
     "correct": true,
     "answer": "strings, boolean, ints, and floats"
    },
    {
     "_id": "6d566a80-d985-7ef4-7eec-af61579092a5",
     "correct": false,
     "answer": "strings, true/false, numbers, decimals"
    },
    {
     "_id": "fcb187e2-6e33-2526-d969-e53194ba9fe3",
     "correct": false,
     "answer": "boolean, hexadecimal, ints, strings"
    },
    {
     "_id": "788a6d19-7c1c-2c68-4928-59dd1c6c90c2",
     "correct": false,
     "answer": "numbers, images, audio, video"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n* strings - collections of letters, numbers, and symbols\n* boolean - true or false\n* ints - integers (no decimal)\n* floats - numbers with a decimal",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the four basic data types"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1021258373",
  "source": {
   "name": "Python print without newline character",
   "showName": false,
   "instructions": "## Printing Without the Newline Character\nFill in the blank with the missing text that will print the text `Hi!` without adding a newline character?",
   "text": "`print(\"Hi!\", end=<<<''>>>)`",
   "guidance": "To remove the newline character from the `print` command, you need to add `end=''` to the command. The correct answer looks like this: `print(\"Hi!\", end='')`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write a print command without a newline character",
   "tokens": {
    "blank": [
     "''"
    ],
    "text": [
     "`print(\"Hi!\", end=",
     0,
     ")`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2557587753",
  "source": {
   "name": "reading question print command",
   "showName": false,
   "instructions": "## Reading Question\nWhat is wrong with the code snippet below?\n\n```python\nprint(Hello world)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a4930806-2307-6729-d50e-1f8bb9609c32",
     "correct": false,
     "answer": "Capitalize `print`"
    },
    {
     "_id": "8b03a313-48be-379b-ff85-deb7f21f3994",
     "correct": false,
     "answer": "Use `{ }` instead of `( )`"
    },
    {
     "_id": "06d9d513-0a6f-51a3-283a-09f0aa106f60",
     "correct": true,
     "answer": "Missing `\" \"` around `Hello world`"
    },
    {
     "_id": "efa1bc6a-4f01-07e8-12e1-1193809940b2",
     "correct": false,
     "answer": "Add a `;` at the end of the line of code"
    }
   ],
   "guidance": "After the `print` command use parentheses and quotation marks around the words to be printed.\n\n`print(\"Hello world\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using quotes in the print command"
     }
    ],
    "files": [
     "code/fundamentals/playground-printing.py",
     "code/playground-printing.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-printing.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the components needed to print a string to the console"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3628483659",
  "source": {
   "name": "print command newline character",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: Python automatically inserts a newline character when you use the `print` command.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8f73bf45-99c3-450a-452e-85625551e7eb",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "c62f86a2-eac6-8045-0fc0-c01fb52e4d39",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "True. When you use the `print` command, Python inserts a newline character automatically.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-printing2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT understand that newline characters are added by default"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-928839981",
  "source": {
   "name": "case sensitive variables",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: the two names refer to the same variable.\n`My_Variable`\n`my_variable`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "10c3413a-b154-12da-35f4-8ed296ebf23b",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "2c6ce430-cd1c-3a03-7cdd-cb10b9c0a23e",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "False. Python is a case sensitive language. That means variable names with capital letters are different those with lowercase letters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable names"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Case sensitive"
     }
    ],
    "files": [
     "code/playground-variables1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-variables1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the case sensitive nature of variable names"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2757362999",
  "source": {
   "name": "declaring and overwriting variables",
   "showName": false,
   "instructions": "## Reading Question\nFrom the collection of code blocks, drag out **two** such that the first block declares the variable `my_variable` and assigns it the value of `\"red\"` and the second code block overwrites this with `\"blue\"`.",
   "initial": "my_variable = \"red\"\nmy_variable = \"blue\"\nvar my_variable = \"red\" #distractor\nmy_variable = red #distractor\nvar my_variable = \"blue\" #distractor\nmy_variable = blue #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since you have to declare the variable with the value `\"red\"`, this line of code must come first. The second line will assign the value `\"blue\"` to the variable.\n\nPython does not use the `var` keyword to declare variables.\n\n```python\nmy_variable = \"red\"\nmy_variable = \"blue\"\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declare and overwrite values"
     }
    ],
    "files": [
     "code/fundamentals/playground-assign-value.py",
     "code/playground-assign-value.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-assign-value.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the difference between declaring a variable and overwriting its value"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3755866164",
  "source": {
   "name": "string reading question",
   "showName": false,
   "instructions": "## Reading Question\nComplete the line of code below so that variable declaration is correct.",
   "text": "`my_string = \"This is a string<<<\">>>`",
   "guidance": "Since the beginning of the string starts with a double-quotation mark, you need to end the string with a double-quotation mark.\n\n`my_string = \"This is a string\"`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using appropriate quotation mark (\" or ')"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the need to be consistent with the type of quotation mark used",
   "tokens": {
    "blank": [
     "\""
    ],
    "text": [
     "`my_string = \"This is a string",
     0,
     "`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-397882862",
  "source": {
   "name": "boolean reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the rule regarding boolean values in Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2a14a4dd-e0a9-583a-7863-c0e4c545a482",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be lowercase. "
    },
    {
     "_id": "223f2866-8e5d-a1ae-1313-f28924cb7da4",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "5032ef8c-2720-52c3-24fe-13242794a627",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be uppercase. "
    },
    {
     "_id": "e91a8a64-a81f-ec1b-61ff-85a3e9a7a276",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all caps."
    }
   ],
   "guidance": "Boolean values in Python are case sensitive. They must start with a capital letter.\n`True` and `False`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Boolean"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Capitalization"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly capitalize boolean values"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-744756114",
  "source": {
   "name": "float reading question",
   "showName": false,
   "instructions": "## Reading Question\nFrom the lines of text below, drag **two** of them into answer space. Your answer should explain the difference between a float and an int.",
   "initial": "A float is a decimal number,\nwhile an int is a whole number.\nA float is a whole number, #distractor\nwhile an int is a decimal number. #distractor\nA float is an irrational number, #distractor\nwhile an int is a rational number. #distractor",
   "options": "{\n  \"searchId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A floating point number is one with a decimal. An int is a whole number (or integer).",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Difference between float and int"
     }
    ],
    "files": [
     "code/playground-types-float.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types-float.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT describe the difference between a float and an int"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3707172048",
  "source": {
   "name": "fundamentals lab challenge",
   "showName": false,
   "instructions": "## Fundamentals Lab Challenge\nYou now know how to declare variables with four different data types and print these variables.\n\nRearrange the code blocks below such that you have a program that prints the output below. Note, you **will not** use all of the code blocks for your solution.\n\n```python\nPython fundamentals are very useful\n```",
   "initial": "variable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\nvariable_1 = variable_2 #distractor\nvariable_1 = Python fundamentals are very useful #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There is only one `print` command, and it prints the value of `variable_2`. So, `variable_2` must contain the phrase `Python fundamentals are very useful`. Since this phrase is stored in `variable_1`, then you need to set the value of `variable_2` to that of `variable_1`.\n\n```python\nvariable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables and Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Combine print and variable assignments"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use variable declarations and a print statement to output a particular phrase"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1001048360",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\nTrue",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a boolean variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1343612139",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\n3",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Interger variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py",
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2882174987",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 code/fundamentals/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "This is a string",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String varaibles"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1795615497",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of 3. Print the variable.",
   "command": "python3 code/fundamentals/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "3.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1941220880",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 code/fundamentals/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "The trick is to remove the newline character that is implicit with a `print` command. The sentence can be divided any way you want, but you need to use `end=''` in the first `print`.\n\n```python\nprint(\"Okay, it is time to \", end='')\nprint(\"learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Okay, it is time to learn about operators.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py",
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove the newline character from print"
  }
 },
   {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1940684776",
  "source": {
   "name": "formative assessment 2 printing",
   "showName": false,
   "instructions": "Which statement below will print `Hi!` **without** a newline character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0241f855-16b7-0ecd-7679-295ace8629b2",
     "correct": true,
     "answer": "`print(\"Hi!\", end='')`"
    },
    {
     "_id": "9f6cdfee-9c02-0383-9cd8-a2c1a2beb78c",
     "correct": false,
     "answer": "`print(\"Hi!\", end=N/A)`"
    },
    {
     "_id": "fec7e9d1-095f-3337-b6a6-55d1a3769450",
     "correct": false,
     "answer": "`print(\"Hi!\", stop='')`"
    },
    {
     "_id": "d63202cf-da3c-ff1b-c466-4ca9b8e25c14",
     "correct": false,
     "answer": "'print(\"Hi!\")"
    }
   ],
   "guidance": "By default, the `print` statement will add a newline character. To remove it, add `end=''` or `end=\"\"` to the print statement. The solution is `print(\"Hi!\", end='')`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT remove newline character from the print statement"
  }
 },
  {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3042873713",
  "source": {
   "name": "reading question integers",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the properly formatted integers from the list below. **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7f62604f-2694-a6d7-7483-06f613c6d9b3",
     "correct": false,
     "answer": "\"20000\""
    },
    {
     "_id": "c3a1b475-5d9a-ba1a-b566-d441647192da",
     "correct": true,
     "answer": "20000"
    },
    {
     "_id": "6503f305-75a3-6d32-f42b-4331a982692f",
     "correct": false,
     "answer": "20,000"
    },
    {
     "_id": "a53ec453-8cf5-c1e3-488a-99ece062a5dc",
     "correct": true,
     "answer": "020000"
    }
   ],
   "guidance": "The correct answers are `20000` and 020000`. Commas are not used with larger numbers. Leading zeros do not affect Python's ability to work with integers. However, leading zeros can be confusing to programmers so they should be avoided. Quotation marks around an integer mean that the data type is a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integers"
     }
    ],
    "files": [
     "code/fundamentals/playground-types-int.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-types-int.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Identify an integer"
  }
 },
  {
  "type": "multiple-choice",
  "taskId": "multiple-choice-976098584",
  "source": {
   "name": "lab question 1 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nSelect all of the correct ways a string can be declared. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "63a1dad0-c1c9-fb74-0e42-1e1e86175ea9",
     "correct": true,
     "answer": "my_string = \"I am a string\""
    },
    {
     "_id": "83112ff9-d5a2-7f91-8f67-ba29549e16d9",
     "correct": false,
     "answer": "my_string = \"I am a string'"
    },
    {
     "_id": "e8c05ead-5430-47fe-8c0d-5c35681328fd",
     "correct": true,
     "answer": "my_string = '\"I am a string\"'"
    },
    {
     "_id": "2cf7c3e6-9347-43d3-d3d3-d0d085c31952",
     "correct": true,
     "answer": "my_string = 'I am a string'"
    }
   ],
   "guidance": "Strings can be declared with either single or double quotes. However, you must be consistent. If you start with a single quote, end with a single quote. The same is true for double quotes. \n\n```python\nmy_string = 'I am a string'\nmy_string = \"I am a string\"\n```\n\nYou can have both single and double quotes as long as you are consistent. The outer quotes must match just as the inner quotes must match. That is why the line of code below is also correct.\n\n```python\nmy_string = '\"I am a string\"'\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declaring strings"
     }
    ],
    "files": [
     "code/fundamentals/lab-print.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-print.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify which quotes can be used to declare a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1694007804",
  "source": {
   "name": "lab question 2 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nWhat are the rules for variable names in Python? **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "72d06037-074e-55b3-89b2-6dd02a3439c3",
     "correct": true,
     "answer": "You cannot use a keyword"
    },
    {
     "_id": "1939e00e-a091-a19f-fd64-a1063f17eac5",
     "correct": false,
     "answer": "You must use capital letters"
    },
    {
     "_id": "df338ea4-bb95-9f98-6627-6976decc967b",
     "correct": true,
     "answer": "The variable name must start with a letter or an underscore"
    },
    {
     "_id": "77af80f6-81e7-9a06-5db7-8680a85cd8c9",
     "correct": false,
     "answer": "Variable names must be a noun"
    },
    {
     "_id": "ebfc943b-5e7d-c5d6-89ba-0950f13924f5",
     "correct": true,
     "answer": "The rest of the variable name can only be letters, numbers, or an underscore"
    }
   ],
   "guidance": "There are three rules for creating a variable name:\n1) You cannot use a Python keyword\n2) The variable name must start with a letter or an underscore\n3) The rest of the variable name can be letters, numbers, or an underscore",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Declaring Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable naming rules"
     }
    ],
    "files": [
     "code/fundamentals/lab-variables.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-variables.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the rules for making a variable name"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2141727151",
  "source": {
   "name": "lab question 2 operators",
   "showName": false,
   "instructions": "## Lab Question\nWhich of the following operators **cannot** be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "afe9075a-3566-5f07-9d5e-aab0268de4bf",
     "correct": false,
     "answer": "`+`"
    },
    {
     "_id": "0734ebf1-f20c-3e6e-a8c3-8037f02d472a",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "6e9c9b0a-05fc-1372-e9b4-af78f734b840",
     "correct": true,
     "answer": "`/`"
    }
   ],
   "guidance": "The `/` (division) operator can only be used with numbers. When used with strings, the `+` operator becomes concatenation and the `*` operator repeats a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String operators"
     }
    ],
    "files": [
     "code/operators/lab-strings.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-strings.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the operators that can be used with strings"
  }
 },
 {
  "type": "test",
  "taskId": "test-927174089",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are two parts to this problem. The first is to declare the variable `my_boolean` and assign it the value of `True`. The second is to print the value of the variable. Your code should look like this:\n\n```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create and print a boolean variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4000027711",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_int`, assign it the value of `3`, and then print the variable.\n\n```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integer Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-704473075",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-3-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You need to create the variable `my_string`, assign it the value of `This is a string`, and then print the variable.\n\n```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String Variable"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-3755746604",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of `3.0`. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-4-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_float`, assign it the value of `3.0`, and then print the variable.\n\n```python\nmy_float = 3.0\nprint(my_float)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4241539602",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 .guides/secure/fundamentals-exercise-5-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are several ways to solve this problem, so there is no single solution. The key to this problem is removing the newline character from the first print statement. This will ensure that two print statements will produce a single line of output. Here is one possible solution.\n\n```python\nprint(\"Okay, \", end='')\nprint(\"it is time to learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline Character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove newline character from a print statement"
  }
 }
]